version: '3.8'

services:
  redis:
    container_name: redis
    image: redis:v1
    build: redisDocker/
    hostname: redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
##  front:
##    build:
##      context: ../frontend
##      dockerfile: ../dockerCompose/frontDocker/Dockerfile
##    ports:
##      - '44444:8080'
#
  favourites_service:
    build:
      context: ../favouritesService/
      dockerfile: ../dockerCompose/favouritesDocker/Dockerfile
    links:
      - redis
    ports:
      - '10000:8080'
#    environment:
#      logging.level.org.springframework: DEBUG

  shoppingcart_service:
    build:
      context: ../shoppingCartService/
      dockerfile: ../dockerCompose/shoppingCartDocker/Dockerfile
    container_name: shoppingcart_service
    links:
      - redis
    ports:
      - '10001:8080'
    environment:
      logging.level.org.springframework: DEBUG

  shoppingcart_service_2:
    build:
      context: ../shoppingCartService/
      dockerfile: ../dockerCompose/shoppingCartDocker/Dockerfile
    container_name: shoppingcart_service_2
    links:
      - redis
    environment:
      logging.level.org.springframework: DEBUG

  login_service:
    build:
      context: ../loginService/
      dockerfile: ../dockerCompose/loginDocker/Dockerfile
    hostname: login
    ports:
      - '10002:8080'
    depends_on:
      - mongodb
    environment:
      - spring_data_mongodb_authentication_database=admin
      - spring_data_mongodb_database=mydatabase
      - spring_data_mongodb_port=27017
      - spring_data_mongodb_host=mongodb
      - spring_data_mongodb_auto-index-creation=true
      - logging.level.org.springframework=DEBUG
      #- spring_data_mongodb_username=root
      #- spring_data_mongodb_password=root

  mongodb:
    image: mongo
    container_name: "mongodb"
    ports:
      - 27017:27017
    volumes:
      - mongo-data:/data/db
    environment:
      - ME_CONFIG_MONGODB_ADMINUSERNAME=root
      - ME_CONFIG_MONGODB_ADMINPASSWORD=root


  product_service:
    build:
      context: ../productsService/
      dockerfile: ../dockerCompose/productsDocker/Dockerfile
    container_name: "product_service"
    hostname: products
    ports:
      - '10003:8080'
    depends_on:
      - mongodb2
    environment:
      - spring_data_mongodb_authentication_database=admin
      - spring_data_mongodb_database=mydatabase
      - spring_data_mongodb_port=27017
      - spring_data_mongodb_host=mongodb2
      - spring_data_mongodb_auto-index-creation=true

  product_service2:
    build:
      context: ../productsService/
      dockerfile: ../dockerCompose/productsDocker/Dockerfile
    container_name: "product_service2"
    depends_on:
      - mongodb2
    environment:
      - spring_data_mongodb_authentication_database=admin
      - spring_data_mongodb_database=mydatabase
      - spring_data_mongodb_port=27017
      - spring_data_mongodb_host=mongodb2
      - spring_data_mongodb_auto-index-creation=true

  mongodb2:
    image: mongo
    container_name: "mongodb2"
    ports:
      - 27016:27017
    volumes:
      - mongo-data2:/data/db
    environment:
      - ME_CONFIG_MONGODB_ADMINUSERNAME=root
      - ME_CONFIG_MONGODB_ADMINPASSWORD=root

  varnish-products:
    image: varnish:stable
    container_name: varnish-products
    volumes:
      - "./default.vcl:/etc/varnish/default.vcl"
    ports:
      - "80:80"
    tmpfs:
      - /var/lib/varnish:exec
    environment:
      - VARNISH_SIZE=2G
    command: "-p default_keep=300"
    depends_on:
      - product_service

  varnish-cart:
    image: varnish:stable
    container_name: varnish-cart
    volumes:
      - "./cart.vcl:/etc/varnish/default.vcl"
    ports:
      - "81:80"
    tmpfs:
      - /var/lib/varnish:exec
    environment:
      - VARNISH_SIZE=2G
    command: "-p default_keep=300"
    depends_on:
      - shoppingcart_service


#  redis-node-0:
#    image: docker.io/bitnami/redis-cluster:6.2
#    volumes:
#      - redis-cluster_data-0:/bitnami/redis/data
#    container_name: redis-0
#    depends_on:
#      - redis-node-1
#      - redis-node-2
#    environment:
#      - "ALLOW_EMPTY_PASSWORD=yes"
#      - 'REDIS_CLUSTER_REPLICAS=1'
#      - 'REDIS_NODES=redis-node-0 redis-node-1 redis-node-2'
#      - 'REDIS_CLUSTER_CREATOR=yes'
#
#
#  redis-node-1:
#    image: docker.io/bitnami/redis-cluster:6.2
#    volumes:
#      - redis-cluster_data-1:/bitnami/redis/data
#    container_name: redis-1
#    environment:
#      - "ALLOW_EMPTY_PASSWORD=yes"
#      - 'REDIS_NODES=redis-node-0 redis-node-1 redis-node-2'
#
#  redis-node-2:
#    image: docker.io/bitnami/redis-cluster:6.2
#    volumes:
#      - redis-cluster_data-2:/bitnami/redis/data
#    container_name: redis-2
#    environment:
#      - "ALLOW_EMPTY_PASSWORD=yes"
#      - 'REDIS_NODES=redis-node-0 redis-node-1 redis-node-2'

volumes:
  mongo-data:
    driver: local
  mongo-data2:
    driver: local
  redis_data:
#  redis-cluster_data-0:
#    driver: local
#  redis-cluster_data-1:
#    driver: local
#  redis-cluster_data-2:
#    driver: local
